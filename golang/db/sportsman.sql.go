// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sportsman.sql

package db

import (
	"context"
	"time"
)

const createSportsman = `-- name: CreateSportsman :one
INSERT INTO sportsman (name, gender, date_birth, main_coache_id, sport_school_id, insuranse, created_at) VALUES ($1, $2, $3, $4, $5, $6, NOW()) RETURNING id, name, gender, date_birth, main_coache_id, sport_school_id, insuranse, created_at, updated_at
`

type CreateSportsmanParams struct {
	Name          string    `json:"name"`
	Gender        string    `json:"gender"`
	DateBirth     time.Time `json:"date_birth"`
	MainCoacheID  int64     `json:"main_coache_id"`
	SportSchoolID int64     `json:"sport_school_id"`
	Insuranse     string    `json:"insuranse"`
}

func (q *Queries) CreateSportsman(ctx context.Context, arg CreateSportsmanParams) (Sportsman, error) {
	row := q.db.QueryRow(ctx, createSportsman,
		arg.Name,
		arg.Gender,
		arg.DateBirth,
		arg.MainCoacheID,
		arg.SportSchoolID,
		arg.Insuranse,
	)
	var i Sportsman
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Gender,
		&i.DateBirth,
		&i.MainCoacheID,
		&i.SportSchoolID,
		&i.Insuranse,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSportsmanByIDs = `-- name: DeleteSportsmanByIDs :exec
DELETE FROM sportsman WHERE id = $1
`

func (q *Queries) DeleteSportsmanByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSportsmanByIDs, id)
	return err
}

const findSportsmanByIDs = `-- name: FindSportsmanByIDs :one
SELECT sportsman.id as id, 
sportsman.name as name,
sportsman.gender as gender,
sportsman.date_birth as date_birth, 
sportsman.insuranse as insuranse, 
coache.id as main_coache_id, 
coache.name as main_coache_name, 
sport_school.id as sport_school_id, 
sport_school.name as sport_school_name
FROM sportsman as  sportsman 
    JOIN sport_school as sport_school 
    on sportsman.sport_school_id =  sport_school.id 
    JOIN coache as coache 
    on sportsman.main_coache_id =  coache.id
WHERE  sportsman.id = $1 LIMIT 1
`

type FindSportsmanByIDsRow struct {
	ID              int64     `json:"id"`
	Name            string    `json:"name"`
	Gender          string    `json:"gender"`
	DateBirth       time.Time `json:"date_birth"`
	Insuranse       string    `json:"insuranse"`
	MainCoacheID    int64     `json:"main_coache_id"`
	MainCoacheName  string    `json:"main_coache_name"`
	SportSchoolID   int64     `json:"sport_school_id"`
	SportSchoolName string    `json:"sport_school_name"`
}

func (q *Queries) FindSportsmanByIDs(ctx context.Context, id int64) (FindSportsmanByIDsRow, error) {
	row := q.db.QueryRow(ctx, findSportsmanByIDs, id)
	var i FindSportsmanByIDsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Gender,
		&i.DateBirth,
		&i.Insuranse,
		&i.MainCoacheID,
		&i.MainCoacheName,
		&i.SportSchoolID,
		&i.SportSchoolName,
	)
	return i, err
}

const getSportsmans = `-- name: GetSportsmans :many
SELECT sportsman.id as id, 
sportsman.name as name,
sportsman.gender as gender,
sportsman.date_birth as date_birth, 
sportsman.insuranse as insuranse, 
coache.id as main_coache_id, 
coache.name as main_coache_name, 
sport_school.id as sport_school_id, 
sport_school.name as sport_school_name
FROM sportsman as  sportsman 
    JOIN sport_school as sport_school 
    on sportsman.sport_school_id =  sport_school.id 
    JOIN coache as coache 
    on sportsman.main_coache_id =  coache.id
ORDER BY sportsman.name DESC
`

type GetSportsmansRow struct {
	ID              int64     `json:"id"`
	Name            string    `json:"name"`
	Gender          string    `json:"gender"`
	DateBirth       time.Time `json:"date_birth"`
	Insuranse       string    `json:"insuranse"`
	MainCoacheID    int64     `json:"main_coache_id"`
	MainCoacheName  string    `json:"main_coache_name"`
	SportSchoolID   int64     `json:"sport_school_id"`
	SportSchoolName string    `json:"sport_school_name"`
}

func (q *Queries) GetSportsmans(ctx context.Context) ([]GetSportsmansRow, error) {
	rows, err := q.db.Query(ctx, getSportsmans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSportsmansRow{}
	for rows.Next() {
		var i GetSportsmansRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Gender,
			&i.DateBirth,
			&i.Insuranse,
			&i.MainCoacheID,
			&i.MainCoacheName,
			&i.SportSchoolID,
			&i.SportSchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSportsman = `-- name: UpdateSportsman :one
UPDATE sportsman SET name = $2, gender = $3, date_birth = $4, main_coache_id = $5, sport_school_id = $6, insuranse = $7, updated_at = NOW() WHERE id = $1  RETURNING id, name, gender, date_birth, main_coache_id, sport_school_id, insuranse, created_at, updated_at
`

type UpdateSportsmanParams struct {
	ID            int64     `json:"id"`
	Name          string    `json:"name"`
	Gender        string    `json:"gender"`
	DateBirth     time.Time `json:"date_birth"`
	MainCoacheID  int64     `json:"main_coache_id"`
	SportSchoolID int64     `json:"sport_school_id"`
	Insuranse     string    `json:"insuranse"`
}

func (q *Queries) UpdateSportsman(ctx context.Context, arg UpdateSportsmanParams) (Sportsman, error) {
	row := q.db.QueryRow(ctx, updateSportsman,
		arg.ID,
		arg.Name,
		arg.Gender,
		arg.DateBirth,
		arg.MainCoacheID,
		arg.SportSchoolID,
		arg.Insuranse,
	)
	var i Sportsman
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Gender,
		&i.DateBirth,
		&i.MainCoacheID,
		&i.SportSchoolID,
		&i.Insuranse,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
