// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: sportSchool.sql

package db

import (
	"context"
)

const createSportSchool = `-- name: CreateSportSchool :one
INSERT INTO sportSchool (name, created_at) VALUES ($1, NOW()) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateSportSchool(ctx context.Context, name string) (Sportschool, error) {
	row := q.db.QueryRow(ctx, createSportSchool, name)
	var i Sportschool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSportSchoolByIDs = `-- name: DeleteSportSchoolByIDs :exec
DELETE FROM sportSchool WHERE id = $1
`

func (q *Queries) DeleteSportSchoolByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSportSchoolByIDs, id)
	return err
}

const findSportSchoolByIDs = `-- name: FindSportSchoolByIDs :one
SELECT id, name, created_at, updated_at FROM sportSchool WHERE  id = $1 LIMIT 1
`

func (q *Queries) FindSportSchoolByIDs(ctx context.Context, id int64) (Sportschool, error) {
	row := q.db.QueryRow(ctx, findSportSchoolByIDs, id)
	var i Sportschool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSportSchools = `-- name: GetSportSchools :many
SELECT id, name, created_at, updated_at FROM sportSchool ORDER BY id DESC
`

func (q *Queries) GetSportSchools(ctx context.Context) ([]Sportschool, error) {
	rows, err := q.db.Query(ctx, getSportSchools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sportschool{}
	for rows.Next() {
		var i Sportschool
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSportSchool = `-- name: UpdateSportSchool :one
UPDATE sportSchool SET name = $1,  updated_at = NOW() WHERE id = $2  RETURNING id, name, created_at, updated_at
`

type UpdateSportSchoolParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateSportSchool(ctx context.Context, arg UpdateSportSchoolParams) (Sportschool, error) {
	row := q.db.QueryRow(ctx, updateSportSchool, arg.Name, arg.ID)
	var i Sportschool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
