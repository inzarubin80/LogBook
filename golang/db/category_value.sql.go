// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: category_value.sql

package db

import (
	"context"
	"time"
)

const createCategoryValue = `-- name: CreateCategoryValue :one
INSERT INTO category_value (name, created_at) VALUES ($1, NOW()) RETURNING id, name, category_id, created_at, updated_at
`

func (q *Queries) CreateCategoryValue(ctx context.Context, name string) (CategoryValue, error) {
	row := q.db.QueryRow(ctx, createCategoryValue, name)
	var i CategoryValue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategoryValueByIDs = `-- name: DeleteCategoryValueByIDs :exec
DELETE FROM category_value WHERE id = $1
`

func (q *Queries) DeleteCategoryValueByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCategoryValueByIDs, id)
	return err
}

const findCategoryValueByIDs = `-- name: FindCategoryValueByIDs :one
SELECT id, name, created_at, updated_at FROM category_value WHERE  id = $1 LIMIT 1
`

type FindCategoryValueByIDsRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) FindCategoryValueByIDs(ctx context.Context, id int64) (FindCategoryValueByIDsRow, error) {
	row := q.db.QueryRow(ctx, findCategoryValueByIDs, id)
	var i FindCategoryValueByIDsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryValues = `-- name: GetCategoryValues :many
SELECT id, name, category_id, created_at, updated_at FROM category_value ORDER BY id DESC
`

func (q *Queries) GetCategoryValues(ctx context.Context) ([]CategoryValue, error) {
	rows, err := q.db.Query(ctx, getCategoryValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CategoryValue{}
	for rows.Next() {
		var i CategoryValue
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryValue = `-- name: UpdateCategoryValue :one
UPDATE category_value SET name = $1,  updated_at = NOW() WHERE id = $2  RETURNING id, name, category_id, created_at, updated_at
`

type UpdateCategoryValueParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateCategoryValue(ctx context.Context, arg UpdateCategoryValueParams) (CategoryValue, error) {
	row := q.db.QueryRow(ctx, updateCategoryValue, arg.Name, arg.ID)
	var i CategoryValue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
