// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: type_tournament.sql

package db

import (
	"context"
)

const createTypeTournament = `-- name: CreateTypeTournament :one
INSERT INTO type_tournament (name, created_at) VALUES ($1, NOW()) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateTypeTournament(ctx context.Context, name string) (TypeTournament, error) {
	row := q.db.QueryRow(ctx, createTypeTournament, name)
	var i TypeTournament
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTypeTournamentByIDs = `-- name: DeleteTypeTournamentByIDs :exec
DELETE FROM type_tournament WHERE id = $1
`

func (q *Queries) DeleteTypeTournamentByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTypeTournamentByIDs, id)
	return err
}

const findTypeTournamentByIDs = `-- name: FindTypeTournamentByIDs :one
SELECT id, name, created_at, updated_at FROM type_tournament WHERE  id = $1 LIMIT 1
`

func (q *Queries) FindTypeTournamentByIDs(ctx context.Context, id int64) (TypeTournament, error) {
	row := q.db.QueryRow(ctx, findTypeTournamentByIDs, id)
	var i TypeTournament
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTypeTournaments = `-- name: GetTypeTournaments :many
SELECT id, name, created_at, updated_at FROM type_tournament ORDER BY id DESC
`

func (q *Queries) GetTypeTournaments(ctx context.Context) ([]TypeTournament, error) {
	rows, err := q.db.Query(ctx, getTypeTournaments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TypeTournament{}
	for rows.Next() {
		var i TypeTournament
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTypeTournament = `-- name: UpdateTypeTournament :one
UPDATE type_tournament SET name = $1,  updated_at = NOW() WHERE id = $2  RETURNING id, name, created_at, updated_at
`

type UpdateTypeTournamentParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateTypeTournament(ctx context.Context, arg UpdateTypeTournamentParams) (TypeTournament, error) {
	row := q.db.QueryRow(ctx, updateTypeTournament, arg.Name, arg.ID)
	var i TypeTournament
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
