// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tournament.sql

package db

import (
	"context"
	"time"
)

const createTournament = `-- name: CreateTournament :one
INSERT INTO tournament (name, begin_date_tournament, end_date_tournament, type_of_tornament_id, venue, created_at) VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING id, name, begin_date_tournament, end_date_tournament, type_of_tornament_id, venue, created_at, updated_at
`

type CreateTournamentParams struct {
	Name                string    `json:"name"`
	BeginDateTournament time.Time `json:"begin_date_tournament"`
	EndDateTournament   time.Time `json:"end_date_tournament"`
	TypeOfTornamentID   int64     `json:"type_of_tornament_id"`
	Venue               string    `json:"venue"`
}

func (q *Queries) CreateTournament(ctx context.Context, arg CreateTournamentParams) (Tournament, error) {
	row := q.db.QueryRow(ctx, createTournament,
		arg.Name,
		arg.BeginDateTournament,
		arg.EndDateTournament,
		arg.TypeOfTornamentID,
		arg.Venue,
	)
	var i Tournament
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BeginDateTournament,
		&i.EndDateTournament,
		&i.TypeOfTornamentID,
		&i.Venue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTournamentByIDs = `-- name: DeleteTournamentByIDs :exec
DELETE FROM tournament WHERE id = $1
`

func (q *Queries) DeleteTournamentByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTournamentByIDs, id)
	return err
}

const findTournamentByIDs = `-- name: FindTournamentByIDs :one
SELECT tournament.id as id, 
tournament.name as name,
tournament.begin_date_tournament as begin_date_tournament,
tournament.end_date_tournament as end_date_tournament, 
tournament.venue as venue, 
type_tournament.id as type_of_tornament_id, 
type_tournament.name as type_of_tornament_name
FROM tournament as  tournament 
    JOIN type_tournament as type_tournament 
    on tournament.type_of_tornament_id =  type_tournament.id 
WHERE  tournament.id = $1 LIMIT 1
`

type FindTournamentByIDsRow struct {
	ID                  int64     `json:"id"`
	Name                string    `json:"name"`
	BeginDateTournament time.Time `json:"begin_date_tournament"`
	EndDateTournament   time.Time `json:"end_date_tournament"`
	Venue               string    `json:"venue"`
	TypeOfTornamentID   int64     `json:"type_of_tornament_id"`
	TypeOfTornamentName string    `json:"type_of_tornament_name"`
}

func (q *Queries) FindTournamentByIDs(ctx context.Context, id int64) (FindTournamentByIDsRow, error) {
	row := q.db.QueryRow(ctx, findTournamentByIDs, id)
	var i FindTournamentByIDsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BeginDateTournament,
		&i.EndDateTournament,
		&i.Venue,
		&i.TypeOfTornamentID,
		&i.TypeOfTornamentName,
	)
	return i, err
}

const getTournaments = `-- name: GetTournaments :many
SELECT tournament.id as id, 
tournament.name as name,
tournament.begin_date_tournament as begin_date_tournament,
tournament.end_date_tournament as end_date_tournament, 
tournament.venue as venue, 
type_tournament.id as type_of_tornament_id, 
type_tournament.name as type_of_tornament_name
FROM tournament as  tournament 
    JOIN type_tournament as type_tournament 
    on tournament.type_of_tornament_id =  type_tournament.id 
ORDER BY tournament.name DESC
`

type GetTournamentsRow struct {
	ID                  int64     `json:"id"`
	Name                string    `json:"name"`
	BeginDateTournament time.Time `json:"begin_date_tournament"`
	EndDateTournament   time.Time `json:"end_date_tournament"`
	Venue               string    `json:"venue"`
	TypeOfTornamentID   int64     `json:"type_of_tornament_id"`
	TypeOfTornamentName string    `json:"type_of_tornament_name"`
}

func (q *Queries) GetTournaments(ctx context.Context) ([]GetTournamentsRow, error) {
	rows, err := q.db.Query(ctx, getTournaments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTournamentsRow{}
	for rows.Next() {
		var i GetTournamentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BeginDateTournament,
			&i.EndDateTournament,
			&i.Venue,
			&i.TypeOfTornamentID,
			&i.TypeOfTornamentName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTournament = `-- name: UpdateTournament :one
UPDATE tournament SET name = $2, begin_date_tournament = $3, end_date_tournament = $4, type_of_tornament_id = $5, venue = $6, updated_at = NOW() WHERE id = $1  RETURNING id, name, begin_date_tournament, end_date_tournament, type_of_tornament_id, venue, created_at, updated_at
`

type UpdateTournamentParams struct {
	ID                  int64     `json:"id"`
	Name                string    `json:"name"`
	BeginDateTournament time.Time `json:"begin_date_tournament"`
	EndDateTournament   time.Time `json:"end_date_tournament"`
	TypeOfTornamentID   int64     `json:"type_of_tornament_id"`
	Venue               string    `json:"venue"`
}

func (q *Queries) UpdateTournament(ctx context.Context, arg UpdateTournamentParams) (Tournament, error) {
	row := q.db.QueryRow(ctx, updateTournament,
		arg.ID,
		arg.Name,
		arg.BeginDateTournament,
		arg.EndDateTournament,
		arg.TypeOfTornamentID,
		arg.Venue,
	)
	var i Tournament
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BeginDateTournament,
		&i.EndDateTournament,
		&i.TypeOfTornamentID,
		&i.Venue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
