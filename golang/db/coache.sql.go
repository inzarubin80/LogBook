// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: coache.sql

package db

import (
	"context"
)

const createCoache = `-- name: CreateCoache :one
INSERT INTO coache (name, created_at) VALUES ($1, NOW()) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateCoache(ctx context.Context, name string) (Coache, error) {
	row := q.db.QueryRow(ctx, createCoache, name)
	var i Coache
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCoacheByIDs = `-- name: DeleteCoacheByIDs :exec
DELETE FROM coache WHERE id = $1
`

func (q *Queries) DeleteCoacheByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCoacheByIDs, id)
	return err
}

const findCoacheByIDs = `-- name: FindCoacheByIDs :one
SELECT id, name, created_at, updated_at FROM coache WHERE  id = $1 LIMIT 1
`

func (q *Queries) FindCoacheByIDs(ctx context.Context, id int64) (Coache, error) {
	row := q.db.QueryRow(ctx, findCoacheByIDs, id)
	var i Coache
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCoaches = `-- name: GetCoaches :many
SELECT id, name, created_at, updated_at FROM coache Where name ILIKE  $1 OR $1 = '%%*%%' ORDER BY id DESC
`

func (q *Queries) GetCoaches(ctx context.Context, name string) ([]Coache, error) {
	rows, err := q.db.Query(ctx, getCoaches, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coache{}
	for rows.Next() {
		var i Coache
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoache = `-- name: UpdateCoache :one
UPDATE coache SET name = $1,  updated_at = NOW() WHERE id = $2  RETURNING id, name, created_at, updated_at
`

type UpdateCoacheParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateCoache(ctx context.Context, arg UpdateCoacheParams) (Coache, error) {
	row := q.db.QueryRow(ctx, updateCoache, arg.Name, arg.ID)
	var i Coache
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
