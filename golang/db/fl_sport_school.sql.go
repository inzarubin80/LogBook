// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: fl_sport_school.sql

package db

import (
	"context"
)

const createFl_sport_school = `-- name: CreateFl_sport_school :one
INSERT INTO fl_sport_school (name, created_at) VALUES ($1, NOW()) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateFl_sport_school(ctx context.Context, name string) (FlSportSchool, error) {
	row := q.db.QueryRow(ctx, createFl_sport_school, name)
	var i FlSportSchool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFl_sport_schoolByIDs = `-- name: DeleteFl_sport_schoolByIDs :exec
DELETE FROM fl_sport_school WHERE id = $1
`

func (q *Queries) DeleteFl_sport_schoolByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFl_sport_schoolByIDs, id)
	return err
}

const findFl_sport_schoolByIDs = `-- name: FindFl_sport_schoolByIDs :one
SELECT id, name, created_at, updated_at FROM fl_sport_school WHERE  id = $1 LIMIT 1
`

func (q *Queries) FindFl_sport_schoolByIDs(ctx context.Context, id int64) (FlSportSchool, error) {
	row := q.db.QueryRow(ctx, findFl_sport_schoolByIDs, id)
	var i FlSportSchool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFl_sport_schools = `-- name: GetFl_sport_schools :many
SELECT id, name, created_at, updated_at FROM fl_sport_school ORDER BY id DESC
`

func (q *Queries) GetFl_sport_schools(ctx context.Context) ([]FlSportSchool, error) {
	rows, err := q.db.Query(ctx, getFl_sport_schools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FlSportSchool{}
	for rows.Next() {
		var i FlSportSchool
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFl_sport_school = `-- name: UpdateFl_sport_school :one
UPDATE fl_sport_school SET name = $1,  updated_at = NOW() WHERE id = $2  RETURNING id, name, created_at, updated_at
`

type UpdateFl_sport_schoolParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateFl_sport_school(ctx context.Context, arg UpdateFl_sport_schoolParams) (FlSportSchool, error) {
	row := q.db.QueryRow(ctx, updateFl_sport_school, arg.Name, arg.ID)
	var i FlSportSchool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
