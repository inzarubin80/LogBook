// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: score_scale.sql

package db

import (
	"context"
)

const createScoreScale = `-- name: CreateScoreScale :one
INSERT INTO score_scale (place_from, place_to, numbers_of_points, sport_school_id, type_tournament_id, created_at) VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING id, place_from, place_to, numbers_of_points, sport_school_id, type_tournament_id, created_at, updated_at
`

type CreateScoreScaleParams struct {
	PlaceFrom        int32 `json:"place_from"`
	PlaceTo          int32 `json:"place_to"`
	NumbersOfPoints  int32 `json:"numbers_of_points"`
	SportSchoolID    int64 `json:"sport_school_id"`
	TypeTournamentID int64 `json:"type_tournament_id"`
}

func (q *Queries) CreateScoreScale(ctx context.Context, arg CreateScoreScaleParams) (ScoreScale, error) {
	row := q.db.QueryRow(ctx, createScoreScale,
		arg.PlaceFrom,
		arg.PlaceTo,
		arg.NumbersOfPoints,
		arg.SportSchoolID,
		arg.TypeTournamentID,
	)
	var i ScoreScale
	err := row.Scan(
		&i.ID,
		&i.PlaceFrom,
		&i.PlaceTo,
		&i.NumbersOfPoints,
		&i.SportSchoolID,
		&i.TypeTournamentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteScoreScaleByIDs = `-- name: DeleteScoreScaleByIDs :exec
DELETE FROM score_scale WHERE id = $1
`

func (q *Queries) DeleteScoreScaleByIDs(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteScoreScaleByIDs, id)
	return err
}

const findScoreScaleByIDs = `-- name: FindScoreScaleByIDs :one
SELECT score_scale.id as id, 
score_scale.place_from as place_from,
score_scale.place_to as place_to,
score_scale.numbers_of_points as numbers_of_points,  
sport_school.id as sport_school_id, 
sport_school.name as sport_school_name,
type_tournament.id as type_tournament_id, 
type_tournament.name as type_tournament_name
FROM score_scale as  score_scale 
    JOIN sport_school as sport_school 
    on score_scale.sport_school_id =  sport_school.id 
    JOIN type_tournament as type_tournament 
    on score_scale.type_tournament_id =  type_tournament.id
WHERE  score_scale.id = $1 LIMIT 1
`

type FindScoreScaleByIDsRow struct {
	ID                 int64  `json:"id"`
	PlaceFrom          int32  `json:"place_from"`
	PlaceTo            int32  `json:"place_to"`
	NumbersOfPoints    int32  `json:"numbers_of_points"`
	SportSchoolID      int64  `json:"sport_school_id"`
	SportSchoolName    string `json:"sport_school_name"`
	TypeTournamentID   int64  `json:"type_tournament_id"`
	TypeTournamentName string `json:"type_tournament_name"`
}

func (q *Queries) FindScoreScaleByIDs(ctx context.Context, id int64) (FindScoreScaleByIDsRow, error) {
	row := q.db.QueryRow(ctx, findScoreScaleByIDs, id)
	var i FindScoreScaleByIDsRow
	err := row.Scan(
		&i.ID,
		&i.PlaceFrom,
		&i.PlaceTo,
		&i.NumbersOfPoints,
		&i.SportSchoolID,
		&i.SportSchoolName,
		&i.TypeTournamentID,
		&i.TypeTournamentName,
	)
	return i, err
}

const getScoreScales = `-- name: GetScoreScales :many
SELECT score_scale.id as id, 
score_scale.place_from as place_from,
score_scale.place_to as place_to,
score_scale.numbers_of_points as numbers_of_points,  
sport_school.id as sport_school_id, 
sport_school.name as sport_school_name,
type_tournament.id as type_tournament_id, 
type_tournament.name as type_tournament_name 
FROM score_scale as score_scale 
    JOIN sport_school as sport_school 
    on score_scale.sport_school_id =  sport_school.id 
    JOIN type_tournament as type_tournament 
    on score_scale.type_tournament_id =  type_tournament.id 
ORDER BY sport_school.id DESC
`

type GetScoreScalesRow struct {
	ID                 int64  `json:"id"`
	PlaceFrom          int32  `json:"place_from"`
	PlaceTo            int32  `json:"place_to"`
	NumbersOfPoints    int32  `json:"numbers_of_points"`
	SportSchoolID      int64  `json:"sport_school_id"`
	SportSchoolName    string `json:"sport_school_name"`
	TypeTournamentID   int64  `json:"type_tournament_id"`
	TypeTournamentName string `json:"type_tournament_name"`
}

func (q *Queries) GetScoreScales(ctx context.Context) ([]GetScoreScalesRow, error) {
	rows, err := q.db.Query(ctx, getScoreScales)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetScoreScalesRow{}
	for rows.Next() {
		var i GetScoreScalesRow
		if err := rows.Scan(
			&i.ID,
			&i.PlaceFrom,
			&i.PlaceTo,
			&i.NumbersOfPoints,
			&i.SportSchoolID,
			&i.SportSchoolName,
			&i.TypeTournamentID,
			&i.TypeTournamentName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScoreScale = `-- name: UpdateScoreScale :one
UPDATE score_scale SET place_from = $2, place_to = $3, numbers_of_points = $4, sport_school_id = $5, type_tournament_id = $6, updated_at = NOW() WHERE id = $1  RETURNING id, place_from, place_to, numbers_of_points, sport_school_id, type_tournament_id, created_at, updated_at
`

type UpdateScoreScaleParams struct {
	ID               int64 `json:"id"`
	PlaceFrom        int32 `json:"place_from"`
	PlaceTo          int32 `json:"place_to"`
	NumbersOfPoints  int32 `json:"numbers_of_points"`
	SportSchoolID    int64 `json:"sport_school_id"`
	TypeTournamentID int64 `json:"type_tournament_id"`
}

func (q *Queries) UpdateScoreScale(ctx context.Context, arg UpdateScoreScaleParams) (ScoreScale, error) {
	row := q.db.QueryRow(ctx, updateScoreScale,
		arg.ID,
		arg.PlaceFrom,
		arg.PlaceTo,
		arg.NumbersOfPoints,
		arg.SportSchoolID,
		arg.TypeTournamentID,
	)
	var i ScoreScale
	err := row.Scan(
		&i.ID,
		&i.PlaceFrom,
		&i.PlaceTo,
		&i.NumbersOfPoints,
		&i.SportSchoolID,
		&i.TypeTournamentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
